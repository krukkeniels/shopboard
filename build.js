const esbuild = require('esbuild');
const process = require('process');
const builtins = require('builtin-modules');
const fs = require('fs');
const path = require('path');

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';
const watch = process.argv.includes('--watch');

const context = {
	banner: {
		js: banner,
	},
	entryPoints: ['src/main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins
	],
	format: 'cjs',
	target: 'es2018',
	logLevel: 'info',
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'main.js',
	minify: prod,
};

function bundleCSS() {
	const stylesDir = path.join(__dirname, 'styles');
	const cssFiles = [
		path.join(stylesDir, 'main.css'),
		path.join(stylesDir, 'display.css'),
		path.join(stylesDir, 'loot-display.css'),
		path.join(stylesDir, 'dm-control.css'),
		path.join(stylesDir, 'template-modal.css'),
		path.join(stylesDir, 'loot-generator-modal.css'),
		path.join(stylesDir, 'themes', 'magic-shop.css'),
		path.join(stylesDir, 'themes', 'blacksmith.css'),
		path.join(stylesDir, 'themes', 'general-store.css'),
		path.join(stylesDir, 'themes', 'alchemist.css'),
		// Rarity colors MUST come after themes to override properly
		path.join(stylesDir, 'rarity-colors.css'),
	];

	let bundledCSS = '';

	for (const file of cssFiles) {
		if (fs.existsSync(file)) {
			bundledCSS += fs.readFileSync(file, 'utf8') + '\n';
		}
	}

	fs.writeFileSync(path.join(__dirname, 'styles.css'), bundledCSS);
	console.log('CSS bundled successfully');
}

async function build() {
	// Bundle CSS first
	bundleCSS();

	if (watch) {
		const ctx = await esbuild.context(context);
		await ctx.watch();
		console.log('Watching for changes...');
	} else {
		await esbuild.build(context);
		console.log('Build complete');
	}
}

build().catch(() => process.exit(1));
